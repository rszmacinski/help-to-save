# Copyright 2017 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

appName=help-to-save

# Play Modules
# ~~~~
# Additional play modules can be added here
play.modules.enabled += "com.kenshoo.play.metrics.PlayModule"
play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoHmrcModule"

# Global request handler
# ~~~~
# Set to the object handler for migrated 2.3 services
play.http.requestHandler = "play.api.http.GlobalSettingsHttpRequestHandler"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret = "s6P7A361Pc3qh954bfqLg9DEQdJAsUVEuRxAeJclwOUJAGynKAweBa4OyUVhr6Jl"

# Session configuration
# ~~~~~
application.session.httpOnly = false

application.session.secure = false

# The application languages
# ~~~~~
application.langs = "en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global= uk.gov.hmrc.helptosave.MicroserviceGlobal

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
application.router = prod.Routes

play {
  ws {
    timeout.request = 60000
    ssl {
      trustManager = {
        stores = [
          {
            type: "PEM",
            data: """-----BEGIN CERTIFICATE-----
MIIDkjCCAnqgAwIBAgIEDeUm0TANBgkqhkiG9w0BAQsFADCBijELMAkGA1UEBhMC
R0IxDzANBgNVBAgTBkxvbmRvbjEWMBQGA1UEBxMNRHJ1bW1vbmQgR2F0ZTEpMCcG
A1UEChMgTmF0aW9uYWwgU2F2aW5ncyBhbmQgSW52ZXN0bWVudHMxDDAKBgNVBAsT
A1NJVDEZMBcGA1UEAxMQYXBpLm5zaS5odHMuZXNpdDAeFw0xNzA1MjIxMTU4MDla
Fw0xOTA1MjIxMTU4MDlaMIGKMQswCQYDVQQGEwJHQjEPMA0GA1UECBMGTG9uZG9u
MRYwFAYDVQQHEw1EcnVtbW9uZCBHYXRlMSkwJwYDVQQKEyBOYXRpb25hbCBTYXZp
bmdzIGFuZCBJbnZlc3RtZW50czEMMAoGA1UECxMDU0lUMRkwFwYDVQQDExBhcGku
bnNpLmh0cy5lc2l0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzQ0q
qYFfn2yLPBhTPsc53GLAUgpLq0wudtOnySQNC/bwZfhDP5+/WEZnoiXE2LC47o0W
//CpqQRfIZyX8Fj+XnRvi09fm15JbKfOOUgbDZn4WRKbCRbbycaZNW3kqCm0ePuZ
c1kBq6V45IWMGtKtW1ZVoYpG0XyeovyuhwH24pZg9qE3PSp4wQN0kKaTLtivlZVQ
UMOcd4G4zW9dR5BwbJDeBYfhGhWrZTIHxThAzbBqR95ccCD5e+v0hDakcrlTEN95
q/0jpYSzxsL6hgyK660Jj2VyE9r6AfYBCJ/rPJepfizs/kC5l1t5ys0uhl9L6Bh2
7hRUDWpa0wdoyT+gzwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQB70W7PxPrrQin4
KxScchCrX6gJquZK9WgoScptmuQq035gkL+DNvkqiRsrGOrYTc69+yMiHR89/y71
7lM1qUONSIPFE4h7/u8fSigZFAwOKVeSXWyr1kINOvvGeUdpT/nUPd1Q6v1NR0cI
e+X88VBPGxZMxPhSVg/vdEnTBRqINHZK1q1oOTVd9V7serb1dJ13vB+XUCYEYL2W
t6TqpS1qXhdzbbtSJc8Cc9jPM7wA1CQan9X+LnsOYIz2xXg3b9azcJ//00t3cy7Y
CSu+f2H9W3pS1zO6IH+HEWRg9bq49jLnlH32l6nF+z57Qej7fbGAatZdvc9Zlm/4
o6u1RFfs
-----END CERTIFICATE----- """
          }
        ]
      }
      keyManager = {
        stores = [
          {
            type: "pkcs12",
            password: "changeit",
            path: "keystore.p12"
          }
        ]
      }
    }
  }
}

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.helptosave.controllers.EligibilityCheckController = {
      needsAuth = false
      needsLogging = false
      needsAuditing = false
    }
    uk.gov.hmrc.helptosave.controllers.NSIController = {
        needsAuth = false
        needsLogging = true
        needsAuditing = false
    }
}
# TODO - needs an override entry in each app-config-* file
  proxy {
    proxyRequiredForThisEnvironment = false
    username = username
    password = password
    protocol = http
    host = localhost
    port = 3128
  }

  ws.ssl.disabledKeyAlgorithms = [ "RSA keySize < 1024" ]


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = INFO

# Logger provided to your application:
logger.application = DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}


# Microservice specific config

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}


mongodb {
    uri = "mongodb://localhost:27017/help-to-save"
}


microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {

    auth {
      host = localhost
      port = 8500
    }
    nsi {
      username = "test.user"
      password = "test123"
      host = localhost
      port = 7002
      url = "help-to-save-stub/create-account"
    }
    # for help-to-save-stub use host=localhost and port=7002 and make sure the stub service
    # has started (do sm --start HELP_TO_SAVE_STUB)
    help-to-save-stub {
      host = localhost
      port = 7002
    }

    user-details {
      host = localhost
      port = 9978
    }

  }
}


